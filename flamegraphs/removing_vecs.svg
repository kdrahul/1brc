<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="814843105522"><g><title>[unknown] (134,439,979 samples, 0.02%)</title><rect x="0.0029%" y="949" width="0.0165%" height="15" fill="rgb(227,0,7)" fg:x="23531263" fg:w="134439979"/><text x="0.2529%" y="959.50"></text></g><g><title>read (134,439,979 samples, 0.02%)</title><rect x="0.0029%" y="933" width="0.0165%" height="15" fill="rgb(217,0,24)" fg:x="23531263" fg:w="134439979"/><text x="0.2529%" y="943.50"></text></g><g><title>alloc::string::String::new (1,296,410,951 samples, 0.16%)</title><rect x="1.2490%" y="645" width="0.1591%" height="15" fill="rgb(221,193,54)" fg:x="10177274343" fg:w="1296410951"/><text x="1.4990%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (6,966,232,140 samples, 0.85%)</title><rect x="1.4105%" y="645" width="0.8549%" height="15" fill="rgb(248,212,6)" fg:x="11493619611" fg:w="6966232140"/><text x="1.6605%" y="655.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (6,966,232,140 samples, 0.85%)</title><rect x="1.4105%" y="629" width="0.8549%" height="15" fill="rgb(208,68,35)" fg:x="11493619611" fg:w="6966232140"/><text x="1.6605%" y="639.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (6,966,232,140 samples, 0.85%)</title><rect x="1.4105%" y="613" width="0.8549%" height="15" fill="rgb(232,128,0)" fg:x="11493619611" fg:w="6966232140"/><text x="1.6605%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (6,966,232,140 samples, 0.85%)</title><rect x="1.4105%" y="597" width="0.8549%" height="15" fill="rgb(207,160,47)" fg:x="11493619611" fg:w="6966232140"/><text x="1.6605%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (111,319,754 samples, 0.01%)</title><rect x="2.2518%" y="581" width="0.0137%" height="15" fill="rgb(228,23,34)" fg:x="18348531997" fg:w="111319754"/><text x="2.5018%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (111,319,754 samples, 0.01%)</title><rect x="2.2518%" y="565" width="0.0137%" height="15" fill="rgb(218,30,26)" fg:x="18348531997" fg:w="111319754"/><text x="2.5018%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (111,319,754 samples, 0.01%)</title><rect x="2.2518%" y="549" width="0.0137%" height="15" fill="rgb(220,122,19)" fg:x="18348531997" fg:w="111319754"/><text x="2.5018%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,459,264,736 samples, 0.18%)</title><rect x="3.5895%" y="613" width="0.1791%" height="15" fill="rgb(250,228,42)" fg:x="29249054628" fg:w="1459264736"/><text x="3.8395%" y="623.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,459,264,736 samples, 0.18%)</title><rect x="3.5895%" y="597" width="0.1791%" height="15" fill="rgb(240,193,28)" fg:x="29249054628" fg:w="1459264736"/><text x="3.8395%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,459,264,736 samples, 0.18%)</title><rect x="3.5895%" y="581" width="0.1791%" height="15" fill="rgb(216,20,37)" fg:x="29249054628" fg:w="1459264736"/><text x="3.8395%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,257,916,236 samples, 0.15%)</title><rect x="3.6142%" y="565" width="0.1544%" height="15" fill="rgb(206,188,39)" fg:x="29450403128" fg:w="1257916236"/><text x="3.8642%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,257,916,236 samples, 0.15%)</title><rect x="3.6142%" y="549" width="0.1544%" height="15" fill="rgb(217,207,13)" fg:x="29450403128" fg:w="1257916236"/><text x="3.8642%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,257,916,236 samples, 0.15%)</title><rect x="3.6142%" y="533" width="0.1544%" height="15" fill="rgb(231,73,38)" fg:x="29450403128" fg:w="1257916236"/><text x="3.8642%" y="543.50"></text></g><g><title>alloc::string::String::len (5,580,213,101 samples, 0.68%)</title><rect x="3.7686%" y="613" width="0.6848%" height="15" fill="rgb(225,20,46)" fg:x="30708319364" fg:w="5580213101"/><text x="4.0186%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5,580,213,101 samples, 0.68%)</title><rect x="3.7686%" y="597" width="0.6848%" height="15" fill="rgb(210,31,41)" fg:x="30708319364" fg:w="5580213101"/><text x="4.0186%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::Guard&gt; (244,808,355 samples, 0.03%)</title><rect x="4.4578%" y="613" width="0.0300%" height="15" fill="rgb(221,200,47)" fg:x="36324256183" fg:w="244808355"/><text x="4.7078%" y="623.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (244,808,355 samples, 0.03%)</title><rect x="4.4578%" y="597" width="0.0300%" height="15" fill="rgb(226,26,5)" fg:x="36324256183" fg:w="244808355"/><text x="4.7078%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (244,808,355 samples, 0.03%)</title><rect x="4.4578%" y="581" width="0.0300%" height="15" fill="rgb(249,33,26)" fg:x="36324256183" fg:w="244808355"/><text x="4.7078%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (9,180,964,252 samples, 1.13%)</title><rect x="4.4879%" y="613" width="1.1267%" height="15" fill="rgb(235,183,28)" fg:x="36569064538" fg:w="9180964252"/><text x="4.7379%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (9,180,964,252 samples, 1.13%)</title><rect x="4.4879%" y="597" width="1.1267%" height="15" fill="rgb(221,5,38)" fg:x="36569064538" fg:w="9180964252"/><text x="4.7379%" y="607.50"></text></g><g><title>core::str::converts::from_utf8 (56,296,493,855 samples, 6.91%)</title><rect x="5.6146%" y="613" width="6.9089%" height="15" fill="rgb(247,18,42)" fg:x="45750028790" fg:w="56296493855"/><text x="5.8646%" y="623.50">core::str..</text></g><g><title>core::str::validations::run_utf8_validation (33,087,696,155 samples, 4.06%)</title><rect x="8.4628%" y="597" width="4.0606%" height="15" fill="rgb(241,131,45)" fg:x="68958826490" fg:w="33087696155"/><text x="8.7128%" y="607.50">core..</text></g><g><title>core::str::validations::utf8_char_width (347,058,119 samples, 0.04%)</title><rect x="12.4809%" y="581" width="0.0426%" height="15" fill="rgb(249,31,29)" fg:x="101699464526" fg:w="347058119"/><text x="12.7309%" y="591.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (880,723,045 samples, 0.11%)</title><rect x="12.7068%" y="581" width="0.1081%" height="15" fill="rgb(225,111,53)" fg:x="103540207902" fg:w="880723045"/><text x="12.9568%" y="591.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (880,723,045 samples, 0.11%)</title><rect x="12.7068%" y="565" width="0.1081%" height="15" fill="rgb(238,160,17)" fg:x="103540207902" fg:w="880723045"/><text x="12.9568%" y="575.50"></text></g><g><title>core::cmp::min (306,115,033 samples, 0.04%)</title><rect x="12.7773%" y="549" width="0.0376%" height="15" fill="rgb(214,148,48)" fg:x="104114815914" fg:w="306115033"/><text x="13.0273%" y="559.50"></text></g><g><title>core::cmp::Ord::min (306,115,033 samples, 0.04%)</title><rect x="12.7773%" y="533" width="0.0376%" height="15" fill="rgb(232,36,49)" fg:x="104114815914" fg:w="306115033"/><text x="13.0273%" y="543.50"></text></g><g><title>core::cmp::min_by (306,115,033 samples, 0.04%)</title><rect x="12.7773%" y="517" width="0.0376%" height="15" fill="rgb(209,103,24)" fg:x="104114815914" fg:w="306115033"/><text x="13.0273%" y="527.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (153,826,261 samples, 0.02%)</title><rect x="13.1018%" y="549" width="0.0189%" height="15" fill="rgb(229,88,8)" fg:x="106758715280" fg:w="153826261"/><text x="13.3518%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (153,826,261 samples, 0.02%)</title><rect x="13.1018%" y="533" width="0.0189%" height="15" fill="rgb(213,181,19)" fg:x="106758715280" fg:w="153826261"/><text x="13.3518%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (153,826,261 samples, 0.02%)</title><rect x="13.1018%" y="517" width="0.0189%" height="15" fill="rgb(254,191,54)" fg:x="106758715280" fg:w="153826261"/><text x="13.3518%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (103,678,998 samples, 0.01%)</title><rect x="13.1420%" y="453" width="0.0127%" height="15" fill="rgb(241,83,37)" fg:x="107086723448" fg:w="103678998"/><text x="13.3920%" y="463.50"></text></g><g><title>__fget_light (126,109,952 samples, 0.02%)</title><rect x="13.2055%" y="389" width="0.0155%" height="15" fill="rgb(233,36,39)" fg:x="107603725927" fg:w="126109952"/><text x="13.4555%" y="399.50"></text></g><g><title>__fdget_pos (175,293,487 samples, 0.02%)</title><rect x="13.1996%" y="405" width="0.0215%" height="15" fill="rgb(226,3,54)" fg:x="107555922568" fg:w="175293487"/><text x="13.4496%" y="415.50"></text></g><g><title>lockref_get_not_zero (123,381,155 samples, 0.02%)</title><rect x="13.3622%" y="357" width="0.0151%" height="15" fill="rgb(245,192,40)" fg:x="108881001699" fg:w="123381155"/><text x="13.6122%" y="367.50"></text></g><g><title>dget_parent (364,423,775 samples, 0.04%)</title><rect x="13.3336%" y="373" width="0.0447%" height="15" fill="rgb(238,167,29)" fg:x="108647918266" fg:w="364423775"/><text x="13.5836%" y="383.50"></text></g><g><title>dput (381,897,023 samples, 0.05%)</title><rect x="13.3783%" y="373" width="0.0469%" height="15" fill="rgb(232,182,51)" fg:x="109012342041" fg:w="381897023"/><text x="13.6283%" y="383.50"></text></g><g><title>fsnotify (169,896,554 samples, 0.02%)</title><rect x="13.4252%" y="373" width="0.0209%" height="15" fill="rgb(231,60,39)" fg:x="109394239064" fg:w="169896554"/><text x="13.6752%" y="383.50"></text></g><g><title>__fsnotify_parent (1,515,044,399 samples, 0.19%)</title><rect x="13.2626%" y="389" width="0.1859%" height="15" fill="rgb(208,69,12)" fg:x="108068987699" fg:w="1515044399"/><text x="13.5126%" y="399.50"></text></g><g><title>ext4_file_read_iter (110,789,717 samples, 0.01%)</title><rect x="13.4529%" y="389" width="0.0136%" height="15" fill="rgb(235,93,37)" fg:x="109619638658" fg:w="110789717"/><text x="13.7029%" y="399.50"></text></g><g><title>copy_user_generic_string (4,105,090,310 samples, 0.50%)</title><rect x="13.5817%" y="341" width="0.5038%" height="15" fill="rgb(213,116,39)" fg:x="110669203448" fg:w="4105090310"/><text x="13.8317%" y="351.50"></text></g><g><title>_copy_to_iter (4,289,236,529 samples, 0.53%)</title><rect x="13.5635%" y="357" width="0.5264%" height="15" fill="rgb(222,207,29)" fg:x="110520855114" fg:w="4289236529"/><text x="13.8135%" y="367.50"></text></g><g><title>copy_page_to_iter (4,597,485,981 samples, 0.56%)</title><rect x="13.5308%" y="373" width="0.5642%" height="15" fill="rgb(206,96,30)" fg:x="110254595972" fg:w="4597485981"/><text x="13.7808%" y="383.50"></text></g><g><title>xas_descend (83,337,162 samples, 0.01%)</title><rect x="14.1889%" y="325" width="0.0102%" height="15" fill="rgb(218,138,4)" fg:x="115616955033" fg:w="83337162"/><text x="14.4389%" y="335.50"></text></g><g><title>filemap_get_read_batch (798,950,619 samples, 0.10%)</title><rect x="14.1155%" y="357" width="0.0980%" height="15" fill="rgb(250,191,14)" fg:x="115018838841" fg:w="798950619"/><text x="14.3655%" y="367.50"></text></g><g><title>xas_load (399,962,011 samples, 0.05%)</title><rect x="14.1644%" y="341" width="0.0491%" height="15" fill="rgb(239,60,40)" fg:x="115417827449" fg:w="399962011"/><text x="14.4144%" y="351.50"></text></g><g><title>xas_start (117,497,265 samples, 0.01%)</title><rect x="14.1991%" y="325" width="0.0144%" height="15" fill="rgb(206,27,48)" fg:x="115700292195" fg:w="117497265"/><text x="14.4491%" y="335.50"></text></g><g><title>__count_memcg_events (139,035,540 samples, 0.02%)</title><rect x="14.4673%" y="277" width="0.0171%" height="15" fill="rgb(225,35,8)" fg:x="117885713527" fg:w="139035540"/><text x="14.7173%" y="287.50"></text></g><g><title>charge_memcg (756,898,710 samples, 0.09%)</title><rect x="14.4186%" y="293" width="0.0929%" height="15" fill="rgb(250,213,24)" fg:x="117488663609" fg:w="756898710"/><text x="14.6686%" y="303.50"></text></g><g><title>try_charge_memcg (109,496,376 samples, 0.01%)</title><rect x="14.4980%" y="277" width="0.0134%" height="15" fill="rgb(247,123,22)" fg:x="118136065943" fg:w="109496376"/><text x="14.7480%" y="287.50"></text></g><g><title>get_mem_cgroup_from_mm (362,356,949 samples, 0.04%)</title><rect x="14.5115%" y="293" width="0.0445%" height="15" fill="rgb(231,138,38)" fg:x="118245562319" fg:w="362356949"/><text x="14.7615%" y="303.50"></text></g><g><title>__mem_cgroup_charge (1,420,007,380 samples, 0.17%)</title><rect x="14.3821%" y="309" width="0.1743%" height="15" fill="rgb(231,145,46)" fg:x="117191894431" fg:w="1420007380"/><text x="14.6321%" y="319.50"></text></g><g><title>__mod_lruvec_state (127,323,417 samples, 0.02%)</title><rect x="14.5828%" y="293" width="0.0156%" height="15" fill="rgb(251,118,11)" fg:x="118827086359" fg:w="127323417"/><text x="14.8328%" y="303.50"></text></g><g><title>__mod_lruvec_page_state (425,279,867 samples, 0.05%)</title><rect x="14.5564%" y="309" width="0.0522%" height="15" fill="rgb(217,147,25)" fg:x="118611901811" fg:w="425279867"/><text x="14.8064%" y="319.50"></text></g><g><title>srso_return_thunk (83,337,658 samples, 0.01%)</title><rect x="14.6252%" y="309" width="0.0102%" height="15" fill="rgb(247,81,37)" fg:x="119172174776" fg:w="83337658"/><text x="14.8752%" y="319.50"></text></g><g><title>srso_safe_ret (83,337,658 samples, 0.01%)</title><rect x="14.6252%" y="293" width="0.0102%" height="15" fill="rgb(209,12,38)" fg:x="119172174776" fg:w="83337658"/><text x="14.8752%" y="303.50"></text></g><g><title>xas_descend (327,881,127 samples, 0.04%)</title><rect x="14.7856%" y="277" width="0.0402%" height="15" fill="rgb(227,1,9)" fg:x="120479800237" fg:w="327881127"/><text x="15.0356%" y="287.50"></text></g><g><title>xa_get_order (1,641,987,224 samples, 0.20%)</title><rect x="14.6354%" y="309" width="0.2015%" height="15" fill="rgb(248,47,43)" fg:x="119255512434" fg:w="1641987224"/><text x="14.8854%" y="319.50"></text></g><g><title>xas_load (1,064,683,801 samples, 0.13%)</title><rect x="14.7062%" y="293" width="0.1307%" height="15" fill="rgb(221,10,30)" fg:x="119832815857" fg:w="1064683801"/><text x="14.9562%" y="303.50"></text></g><g><title>xas_start (89,818,294 samples, 0.01%)</title><rect x="14.8259%" y="277" width="0.0110%" height="15" fill="rgb(210,229,1)" fg:x="120807681364" fg:w="89818294"/><text x="15.0759%" y="287.50"></text></g><g><title>xas_descend (158,798,124 samples, 0.02%)</title><rect x="14.8767%" y="293" width="0.0195%" height="15" fill="rgb(222,148,37)" fg:x="121221635548" fg:w="158798124"/><text x="15.1267%" y="303.50"></text></g><g><title>xas_find_conflict (548,883,697 samples, 0.07%)</title><rect x="14.8369%" y="309" width="0.0674%" height="15" fill="rgb(234,67,33)" fg:x="120897499658" fg:w="548883697"/><text x="15.0869%" y="319.50"></text></g><g><title>workingset_update_node (127,295,445 samples, 0.02%)</title><rect x="14.9412%" y="293" width="0.0156%" height="15" fill="rgb(247,98,35)" fg:x="121747611305" fg:w="127295445"/><text x="15.1912%" y="303.50"></text></g><g><title>__filemap_add_folio (5,625,480,471 samples, 0.69%)</title><rect x="14.2728%" y="325" width="0.6904%" height="15" fill="rgb(247,138,52)" fg:x="116300877520" fg:w="5625480471"/><text x="14.5228%" y="335.50"></text></g><g><title>xas_store (448,200,746 samples, 0.06%)</title><rect x="14.9082%" y="309" width="0.0550%" height="15" fill="rgb(213,79,30)" fg:x="121478157245" fg:w="448200746"/><text x="15.1582%" y="319.50"></text></g><g><title>__mod_lruvec_state (87,365,663 samples, 0.01%)</title><rect x="15.0701%" y="277" width="0.0107%" height="15" fill="rgb(246,177,23)" fg:x="122797332635" fg:w="87365663"/><text x="15.3201%" y="287.50"></text></g><g><title>__mod_memcg_lruvec_state (208,396,185 samples, 0.03%)</title><rect x="15.0808%" y="277" width="0.0256%" height="15" fill="rgb(230,62,27)" fg:x="122884698298" fg:w="208396185"/><text x="15.3308%" y="287.50"></text></g><g><title>lru_add_fn (1,127,911,529 samples, 0.14%)</title><rect x="14.9974%" y="293" width="0.1384%" height="15" fill="rgb(216,154,8)" fg:x="122205372118" fg:w="1127911529"/><text x="15.2474%" y="303.50"></text></g><g><title>folio_add_lru (1,386,979,302 samples, 0.17%)</title><rect x="14.9676%" y="325" width="0.1702%" height="15" fill="rgb(244,35,45)" fg:x="121962103451" fg:w="1386979302"/><text x="15.2176%" y="335.50"></text></g><g><title>folio_batch_move_lru (1,307,553,499 samples, 0.16%)</title><rect x="14.9773%" y="309" width="0.1605%" height="15" fill="rgb(251,115,12)" fg:x="122041529254" fg:w="1307553499"/><text x="15.2273%" y="319.50"></text></g><g><title>__radix_tree_lookup (177,275,070 samples, 0.02%)</title><rect x="15.2040%" y="309" width="0.0218%" height="15" fill="rgb(240,54,50)" fg:x="123888856332" fg:w="177275070"/><text x="15.4540%" y="319.50"></text></g><g><title>_raw_spin_lock_irq (139,055,981 samples, 0.02%)</title><rect x="15.2837%" y="293" width="0.0171%" height="15" fill="rgb(233,84,52)" fg:x="124538561798" fg:w="139055981"/><text x="15.5337%" y="303.50"></text></g><g><title>lru_note_cost (626,174,353 samples, 0.08%)</title><rect x="15.2328%" y="309" width="0.0768%" height="15" fill="rgb(207,117,47)" fg:x="124123025624" fg:w="626174353"/><text x="15.4828%" y="319.50"></text></g><g><title>mem_cgroup_flush_stats_delayed (138,263,946 samples, 0.02%)</title><rect x="15.3168%" y="309" width="0.0170%" height="15" fill="rgb(249,43,39)" fg:x="124807672609" fg:w="138263946"/><text x="15.5668%" y="319.50"></text></g><g><title>__mod_lruvec_state (235,811,287 samples, 0.03%)</title><rect x="15.3711%" y="293" width="0.0289%" height="15" fill="rgb(209,38,44)" fg:x="125250146692" fg:w="235811287"/><text x="15.6211%" y="303.50"></text></g><g><title>__mod_node_page_state (97,737,508 samples, 0.01%)</title><rect x="15.3880%" y="277" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="125388220471" fg:w="97737508"/><text x="15.6380%" y="287.50"></text></g><g><title>mod_lruvec_state (708,322,014 samples, 0.09%)</title><rect x="15.3401%" y="309" width="0.0869%" height="15" fill="rgb(242,79,21)" fg:x="124997371213" fg:w="708322014"/><text x="15.5901%" y="319.50"></text></g><g><title>__mod_memcg_lruvec_state (219,735,248 samples, 0.03%)</title><rect x="15.4000%" y="293" width="0.0270%" height="15" fill="rgb(211,96,35)" fg:x="125485957979" fg:w="219735248"/><text x="15.6500%" y="303.50"></text></g><g><title>filemap_add_folio (9,774,326,227 samples, 1.20%)</title><rect x="14.2455%" y="341" width="1.1995%" height="15" fill="rgb(253,215,40)" fg:x="116078473006" fg:w="9774326227"/><text x="14.4955%" y="351.50"></text></g><g><title>workingset_refault (2,503,716,480 samples, 0.31%)</title><rect x="15.1378%" y="325" width="0.3073%" height="15" fill="rgb(211,81,21)" fg:x="123349082753" fg:w="2503716480"/><text x="15.3878%" y="335.50"></text></g><g><title>workingset_age_nonresident (127,264,023 samples, 0.02%)</title><rect x="15.4294%" y="309" width="0.0156%" height="15" fill="rgb(208,190,38)" fg:x="125725535210" fg:w="127264023"/><text x="15.6794%" y="319.50"></text></g><g><title>clear_page_rep (2,165,163,669 samples, 0.27%)</title><rect x="15.5728%" y="293" width="0.2657%" height="15" fill="rgb(235,213,38)" fg:x="126894270035" fg:w="2165163669"/><text x="15.8228%" y="303.50"></text></g><g><title>__list_del_entry_valid (162,652,990 samples, 0.02%)</title><rect x="15.8866%" y="277" width="0.0200%" height="15" fill="rgb(237,122,38)" fg:x="129450844834" fg:w="162652990"/><text x="16.1366%" y="287.50"></text></g><g><title>rmqueue_bulk (613,961,762 samples, 0.08%)</title><rect x="15.8386%" y="293" width="0.0753%" height="15" fill="rgb(244,218,35)" fg:x="129059433704" fg:w="613961762"/><text x="16.0886%" y="303.50"></text></g><g><title>get_page_from_freelist (3,467,026,346 samples, 0.43%)</title><rect x="15.4894%" y="309" width="0.4255%" height="15" fill="rgb(240,68,47)" fg:x="126214267535" fg:w="3467026346"/><text x="15.7394%" y="319.50"></text></g><g><title>__alloc_pages (3,824,596,819 samples, 0.47%)</title><rect x="15.4528%" y="325" width="0.4694%" height="15" fill="rgb(210,16,53)" fg:x="125916160587" fg:w="3824596819"/><text x="15.7028%" y="335.50"></text></g><g><title>policy_node (119,013,199 samples, 0.01%)</title><rect x="15.9459%" y="309" width="0.0146%" height="15" fill="rgb(235,124,12)" fg:x="129934282520" fg:w="119013199"/><text x="16.1959%" y="319.50"></text></g><g><title>alloc_pages (328,344,661 samples, 0.04%)</title><rect x="15.9222%" y="325" width="0.0403%" height="15" fill="rgb(224,169,11)" fg:x="129740757406" fg:w="328344661"/><text x="16.1722%" y="335.50"></text></g><g><title>folio_alloc (4,184,646,480 samples, 0.51%)</title><rect x="15.4494%" y="341" width="0.5136%" height="15" fill="rgb(250,166,2)" fg:x="125888410194" fg:w="4184646480"/><text x="15.6994%" y="351.50"></text></g><g><title>__iommu_map (299,464,506 samples, 0.04%)</title><rect x="16.0202%" y="53" width="0.0368%" height="15" fill="rgb(242,216,29)" fg:x="130539328925" fg:w="299464506"/><text x="16.2702%" y="63.50"></text></g><g><title>iommu_v1_map_pages (197,642,074 samples, 0.02%)</title><rect x="16.0327%" y="37" width="0.0243%" height="15" fill="rgb(230,116,27)" fg:x="130641151357" fg:w="197642074"/><text x="16.2827%" y="47.50"></text></g><g><title>__iommu_map_sg (354,443,056 samples, 0.04%)</title><rect x="16.0149%" y="69" width="0.0435%" height="15" fill="rgb(228,99,48)" fg:x="130496258141" fg:w="354443056"/><text x="16.2649%" y="79.50"></text></g><g><title>ata_qc_issue (547,760,799 samples, 0.07%)</title><rect x="15.9941%" y="133" width="0.0672%" height="15" fill="rgb(253,11,6)" fg:x="130326874623" fg:w="547760799"/><text x="16.2441%" y="143.50"></text></g><g><title>dma_map_sg_attrs (508,019,312 samples, 0.06%)</title><rect x="15.9990%" y="117" width="0.0623%" height="15" fill="rgb(247,143,39)" fg:x="130366616110" fg:w="508019312"/><text x="16.2490%" y="127.50"></text></g><g><title>__dma_map_sg_attrs (504,066,005 samples, 0.06%)</title><rect x="15.9995%" y="101" width="0.0619%" height="15" fill="rgb(236,97,10)" fg:x="130370569417" fg:w="504066005"/><text x="16.2495%" y="111.50"></text></g><g><title>iommu_dma_map_sg (433,992,469 samples, 0.05%)</title><rect x="16.0081%" y="85" width="0.0533%" height="15" fill="rgb(233,208,19)" fg:x="130440642953" fg:w="433992469"/><text x="16.2581%" y="95.50"></text></g><g><title>__ata_scsi_queuecmd (634,917,363 samples, 0.08%)</title><rect x="15.9922%" y="149" width="0.0779%" height="15" fill="rgb(216,164,2)" fg:x="130311286524" fg:w="634917363"/><text x="16.2422%" y="159.50"></text></g><g><title>ata_scsi_queuecmd (666,038,892 samples, 0.08%)</title><rect x="15.9912%" y="165" width="0.0817%" height="15" fill="rgb(220,129,5)" fg:x="130303294930" fg:w="666038892"/><text x="16.2412%" y="175.50"></text></g><g><title>__sg_alloc_table (95,322,804 samples, 0.01%)</title><rect x="16.0875%" y="117" width="0.0117%" height="15" fill="rgb(242,17,10)" fg:x="131087634764" fg:w="95322804"/><text x="16.3375%" y="127.50"></text></g><g><title>sd_init_command (174,224,467 samples, 0.02%)</title><rect x="16.0783%" y="165" width="0.0214%" height="15" fill="rgb(242,107,0)" fg:x="131012693134" fg:w="174224467"/><text x="16.3283%" y="175.50"></text></g><g><title>scsi_alloc_sgtables (142,507,605 samples, 0.02%)</title><rect x="16.0822%" y="149" width="0.0175%" height="15" fill="rgb(251,28,31)" fg:x="131044409996" fg:w="142507605"/><text x="16.3322%" y="159.50"></text></g><g><title>sg_alloc_table_chained (99,282,837 samples, 0.01%)</title><rect x="16.0875%" y="133" width="0.0122%" height="15" fill="rgb(233,223,10)" fg:x="131087634764" fg:w="99282837"/><text x="16.3375%" y="143.50"></text></g><g><title>blk_mq_dispatch_rq_list (970,733,960 samples, 0.12%)</title><rect x="15.9810%" y="197" width="0.1191%" height="15" fill="rgb(215,21,27)" fg:x="130220187218" fg:w="970733960"/><text x="16.2310%" y="207.50"></text></g><g><title>scsi_queue_rq (943,107,109 samples, 0.12%)</title><rect x="15.9844%" y="181" width="0.1157%" height="15" fill="rgb(232,23,21)" fg:x="130247814069" fg:w="943107109"/><text x="16.2344%" y="191.50"></text></g><g><title>__blk_mq_run_hw_queue (1,171,672,804 samples, 0.14%)</title><rect x="15.9698%" y="261" width="0.1438%" height="15" fill="rgb(244,5,23)" fg:x="130128717132" fg:w="1171672804"/><text x="16.2198%" y="271.50"></text></g><g><title>blk_mq_sched_dispatch_requests (1,171,672,804 samples, 0.14%)</title><rect x="15.9698%" y="245" width="0.1438%" height="15" fill="rgb(226,81,46)" fg:x="130128717132" fg:w="1171672804"/><text x="16.2198%" y="255.50"></text></g><g><title>__blk_mq_sched_dispatch_requests (1,167,710,641 samples, 0.14%)</title><rect x="15.9703%" y="229" width="0.1433%" height="15" fill="rgb(247,70,30)" fg:x="130132679295" fg:w="1167710641"/><text x="16.2203%" y="239.50"></text></g><g><title>blk_mq_do_dispatch_sched (1,163,700,173 samples, 0.14%)</title><rect x="15.9708%" y="213" width="0.1428%" height="15" fill="rgb(212,68,19)" fg:x="130136689763" fg:w="1163700173"/><text x="16.2208%" y="223.50"></text></g><g><title>blk_finish_plug (1,308,245,536 samples, 0.16%)</title><rect x="15.9639%" y="325" width="0.1606%" height="15" fill="rgb(240,187,13)" fg:x="130081022941" fg:w="1308245536"/><text x="16.2139%" y="335.50"></text></g><g><title>__blk_flush_plug (1,308,245,536 samples, 0.16%)</title><rect x="15.9639%" y="309" width="0.1606%" height="15" fill="rgb(223,113,26)" fg:x="130081022941" fg:w="1308245536"/><text x="16.2139%" y="319.50"></text></g><g><title>blk_mq_flush_plug_list.part.0 (1,292,369,594 samples, 0.16%)</title><rect x="15.9659%" y="293" width="0.1586%" height="15" fill="rgb(206,192,2)" fg:x="130096898883" fg:w="1292369594"/><text x="16.2159%" y="303.50"></text></g><g><title>blk_mq_sched_insert_requests (1,276,418,524 samples, 0.16%)</title><rect x="15.9678%" y="277" width="0.1566%" height="15" fill="rgb(241,108,4)" fg:x="130112849953" fg:w="1276418524"/><text x="16.2178%" y="287.50"></text></g><g><title>bio_add_page (159,597,707 samples, 0.02%)</title><rect x="16.1633%" y="309" width="0.0196%" height="15" fill="rgb(247,173,49)" fg:x="131705168874" fg:w="159597707"/><text x="16.4133%" y="319.50"></text></g><g><title>bio_alloc_bioset (142,951,504 samples, 0.02%)</title><rect x="16.1828%" y="309" width="0.0175%" height="15" fill="rgb(224,114,35)" fg:x="131864766581" fg:w="142951504"/><text x="16.4328%" y="319.50"></text></g><g><title>ext4_map_blocks (112,864,044 samples, 0.01%)</title><rect x="16.2004%" y="309" width="0.0139%" height="15" fill="rgb(245,159,27)" fg:x="132007718085" fg:w="112864044"/><text x="16.4504%" y="319.50"></text></g><g><title>part_in_flight (103,387,825 samples, 0.01%)</title><rect x="16.2570%" y="261" width="0.0127%" height="15" fill="rgb(245,172,44)" fg:x="132468688162" fg:w="103387825"/><text x="16.5070%" y="271.50"></text></g><g><title>blk_mq_submit_bio (403,788,280 samples, 0.05%)</title><rect x="16.2206%" y="293" width="0.0496%" height="15" fill="rgb(236,23,11)" fg:x="132172296492" fg:w="403788280"/><text x="16.4706%" y="303.50"></text></g><g><title>update_io_ticks (119,104,977 samples, 0.01%)</title><rect x="16.2555%" y="277" width="0.0146%" height="15" fill="rgb(205,117,38)" fg:x="132456979795" fg:w="119104977"/><text x="16.5055%" y="287.50"></text></g><g><title>submit_bio_noacct_nocheck (427,550,864 samples, 0.05%)</title><rect x="16.2196%" y="309" width="0.0525%" height="15" fill="rgb(237,72,25)" fg:x="132164326624" fg:w="427550864"/><text x="16.4696%" y="319.50"></text></g><g><title>xas_descend (141,825,801 samples, 0.02%)</title><rect x="16.3406%" y="293" width="0.0174%" height="15" fill="rgb(244,70,9)" fg:x="133150179690" fg:w="141825801"/><text x="16.5906%" y="303.50"></text></g><g><title>ext4_mpage_readpages (1,959,222,961 samples, 0.24%)</title><rect x="16.1245%" y="325" width="0.2404%" height="15" fill="rgb(217,125,39)" fg:x="131389268477" fg:w="1959222961"/><text x="16.3745%" y="335.50"></text></g><g><title>xa_load (756,613,950 samples, 0.09%)</title><rect x="16.2721%" y="309" width="0.0929%" height="15" fill="rgb(235,36,10)" fg:x="132591877488" fg:w="756613950"/><text x="16.5221%" y="319.50"></text></g><g><title>read_pages (3,398,231,153 samples, 0.42%)</title><rect x="15.9630%" y="341" width="0.4170%" height="15" fill="rgb(251,123,47)" fg:x="130073056674" fg:w="3398231153"/><text x="16.2130%" y="351.50"></text></g><g><title>xas_descend (136,860,255 samples, 0.02%)</title><rect x="16.4414%" y="325" width="0.0168%" height="15" fill="rgb(221,13,13)" fg:x="133971727929" fg:w="136860255"/><text x="16.6914%" y="335.50"></text></g><g><title>page_cache_ra_unbounded (18,281,875,801 samples, 2.24%)</title><rect x="14.2190%" y="357" width="2.2436%" height="15" fill="rgb(238,131,9)" fg:x="115862599665" fg:w="18281875801"/><text x="14.4690%" y="367.50">p..</text></g><g><title>xa_load (661,265,727 samples, 0.08%)</title><rect x="16.3815%" y="341" width="0.0812%" height="15" fill="rgb(211,50,8)" fg:x="133483209739" fg:w="661265727"/><text x="16.6315%" y="351.50"></text></g><g><title>filemap_get_pages (19,296,385,818 samples, 2.37%)</title><rect x="14.0950%" y="373" width="2.3681%" height="15" fill="rgb(245,182,24)" fg:x="114852081953" fg:w="19296385818"/><text x="14.3450%" y="383.50">fi..</text></g><g><title>folio_activate_fn (382,631,347 samples, 0.05%)</title><rect x="16.4837%" y="325" width="0.0470%" height="15" fill="rgb(242,14,37)" fg:x="134315988105" fg:w="382631347"/><text x="16.7337%" y="335.50"></text></g><g><title>folio_mark_accessed (554,153,878 samples, 0.07%)</title><rect x="16.4631%" y="373" width="0.0680%" height="15" fill="rgb(246,228,12)" fg:x="134148467771" fg:w="554153878"/><text x="16.7131%" y="383.50"></text></g><g><title>folio_activate (490,320,551 samples, 0.06%)</title><rect x="16.4709%" y="357" width="0.0602%" height="15" fill="rgb(213,55,15)" fg:x="134212301098" fg:w="490320551"/><text x="16.7209%" y="367.50"></text></g><g><title>folio_batch_move_lru (470,491,176 samples, 0.06%)</title><rect x="16.4734%" y="341" width="0.0577%" height="15" fill="rgb(209,9,3)" fg:x="134232130473" fg:w="470491176"/><text x="16.7234%" y="351.50"></text></g><g><title>current_time (115,322,413 samples, 0.01%)</title><rect x="16.5540%" y="341" width="0.0142%" height="15" fill="rgb(230,59,30)" fg:x="134888948680" fg:w="115322413"/><text x="16.8040%" y="351.50"></text></g><g><title>atime_needs_update (229,914,771 samples, 0.03%)</title><rect x="16.5409%" y="357" width="0.0282%" height="15" fill="rgb(209,121,21)" fg:x="134782270350" fg:w="229914771"/><text x="16.7909%" y="367.50"></text></g><g><title>touch_atime (329,472,827 samples, 0.04%)</title><rect x="16.5326%" y="373" width="0.0404%" height="15" fill="rgb(220,109,13)" fg:x="134714517048" fg:w="329472827"/><text x="16.7826%" y="383.50"></text></g><g><title>filemap_read (25,460,809,103 samples, 3.12%)</title><rect x="13.4664%" y="389" width="3.1246%" height="15" fill="rgb(232,18,1)" fg:x="109730428375" fg:w="25460809103"/><text x="13.7164%" y="399.50">fil..</text></g><g><title>workingset_activation (147,247,603 samples, 0.02%)</title><rect x="16.5730%" y="373" width="0.0181%" height="15" fill="rgb(215,41,42)" fg:x="135043989875" fg:w="147247603"/><text x="16.8230%" y="383.50"></text></g><g><title>workingset_age_nonresident (91,495,484 samples, 0.01%)</title><rect x="16.5798%" y="357" width="0.0112%" height="15" fill="rgb(224,123,36)" fg:x="135099741994" fg:w="91495484"/><text x="16.8298%" y="367.50"></text></g><g><title>fsnotify_perm.part.0 (102,316,585 samples, 0.01%)</title><rect x="16.5911%" y="389" width="0.0126%" height="15" fill="rgb(240,125,3)" fg:x="135191237478" fg:w="102316585"/><text x="16.8411%" y="399.50"></text></g><g><title>aa_file_perm (91,424,024 samples, 0.01%)</title><rect x="16.6468%" y="357" width="0.0112%" height="15" fill="rgb(205,98,50)" fg:x="135645043574" fg:w="91424024"/><text x="16.8968%" y="367.50"></text></g><g><title>apparmor_file_permission (265,862,434 samples, 0.03%)</title><rect x="16.6263%" y="373" width="0.0326%" height="15" fill="rgb(205,185,37)" fg:x="135478549275" fg:w="265862434"/><text x="16.8763%" y="383.50"></text></g><g><title>security_file_permission (507,505,123 samples, 0.06%)</title><rect x="16.6069%" y="389" width="0.0623%" height="15" fill="rgb(238,207,15)" fg:x="135320129561" fg:w="507505123"/><text x="16.8569%" y="399.50"></text></g><g><title>ksys_read (28,358,964,000 samples, 3.48%)</title><rect x="13.1894%" y="421" width="3.4803%" height="15" fill="rgb(213,199,42)" fg:x="107472661823" fg:w="28358964000"/><text x="13.4394%" y="431.50">ksy..</text></g><g><title>vfs_read (28,100,409,768 samples, 3.45%)</title><rect x="13.2211%" y="405" width="3.4486%" height="15" fill="rgb(235,201,11)" fg:x="107731216055" fg:w="28100409768"/><text x="13.4711%" y="415.50">vfs..</text></g><g><title>exit_to_user_mode_prepare (212,417,328 samples, 0.03%)</title><rect x="16.6886%" y="405" width="0.0261%" height="15" fill="rgb(207,46,11)" fg:x="135986230362" fg:w="212417328"/><text x="16.9386%" y="415.50"></text></g><g><title>syscall_exit_to_user_mode (295,475,407 samples, 0.04%)</title><rect x="16.6804%" y="421" width="0.0363%" height="15" fill="rgb(241,35,35)" fg:x="135919096866" fg:w="295475407"/><text x="16.9304%" y="431.50"></text></g><g><title>do_syscall_64 (28,992,730,543 samples, 3.56%)</title><rect x="13.1659%" y="437" width="3.5581%" height="15" fill="rgb(243,32,47)" fg:x="107281687048" fg:w="28992730543"/><text x="13.4159%" y="447.50">do_s..</text></g><g><title>entry_SYSCALL_64_after_hwframe (29,147,616,337 samples, 3.58%)</title><rect x="13.1547%" y="453" width="3.5771%" height="15" fill="rgb(247,202,23)" fg:x="107190402446" fg:w="29147616337"/><text x="13.4047%" y="463.50">entr..</text></g><g><title>read (29,409,725,655 samples, 3.61%)</title><rect x="13.1299%" y="469" width="3.6093%" height="15" fill="rgb(219,102,11)" fg:x="106988050472" fg:w="29409725655"/><text x="13.3799%" y="479.50">read</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (32,027,100,244 samples, 3.93%)</title><rect x="12.8149%" y="581" width="3.9305%" height="15" fill="rgb(243,110,44)" fg:x="104420930947" fg:w="32027100244"/><text x="13.0649%" y="591.50">&lt;std..</text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (32,027,100,244 samples, 3.93%)</title><rect x="12.8149%" y="565" width="3.9305%" height="15" fill="rgb(222,74,54)" fg:x="104420930947" fg:w="32027100244"/><text x="13.0649%" y="575.50">std:..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (29,535,489,650 samples, 3.62%)</title><rect x="13.1206%" y="549" width="3.6247%" height="15" fill="rgb(216,99,12)" fg:x="106912541541" fg:w="29535489650"/><text x="13.3706%" y="559.50">std:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (29,531,534,110 samples, 3.62%)</title><rect x="13.1211%" y="533" width="3.6242%" height="15" fill="rgb(226,22,26)" fg:x="106916497081" fg:w="29531534110"/><text x="13.3711%" y="543.50">&lt;std..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (29,491,913,483 samples, 3.62%)</title><rect x="13.1260%" y="517" width="3.6193%" height="15" fill="rgb(217,163,10)" fg:x="106956117708" fg:w="29491913483"/><text x="13.3760%" y="527.50">&lt;&amp;st..</text></g><g><title>std::sys::pal::unix::fs::File::read_buf (29,491,913,483 samples, 3.62%)</title><rect x="13.1260%" y="501" width="3.6193%" height="15" fill="rgb(213,25,53)" fg:x="106956117708" fg:w="29491913483"/><text x="13.3760%" y="511.50">std:..</text></g><g><title>std::sys::pal::unix::fd::FileDesc::read_buf (29,491,913,483 samples, 3.62%)</title><rect x="13.1260%" y="485" width="3.6193%" height="15" fill="rgb(252,105,26)" fg:x="106956117708" fg:w="29491913483"/><text x="13.3760%" y="495.50">std:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1,589,025,122 samples, 0.20%)</title><rect x="17.8348%" y="533" width="0.1950%" height="15" fill="rgb(220,39,43)" fg:x="145325779233" fg:w="1589025122"/><text x="18.0848%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1,006,505,664 samples, 0.12%)</title><rect x="18.2865%" y="501" width="0.1235%" height="15" fill="rgb(229,68,48)" fg:x="149006579408" fg:w="1006505664"/><text x="18.5365%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (990,593,022 samples, 0.12%)</title><rect x="18.2885%" y="485" width="0.1216%" height="15" fill="rgb(252,8,32)" fg:x="149022492050" fg:w="990593022"/><text x="18.5385%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,010,357,655 samples, 0.12%)</title><rect x="18.6762%" y="469" width="0.1240%" height="15" fill="rgb(223,20,43)" fg:x="152182000548" fg:w="1010357655"/><text x="18.9262%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,009,440,292 samples, 0.12%)</title><rect x="18.8002%" y="469" width="0.1239%" height="15" fill="rgb(229,81,49)" fg:x="153192358203" fg:w="1009440292"/><text x="19.0502%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (140,687,239 samples, 0.02%)</title><rect x="19.5933%" y="453" width="0.0173%" height="15" fill="rgb(236,28,36)" fg:x="159654773059" fg:w="140687239"/><text x="19.8433%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (140,687,239 samples, 0.02%)</title><rect x="19.5933%" y="437" width="0.0173%" height="15" fill="rgb(249,185,26)" fg:x="159654773059" fg:w="140687239"/><text x="19.8433%" y="447.50"></text></g><g><title>alloc::alloc::realloc (136,693,493 samples, 0.02%)</title><rect x="19.5938%" y="421" width="0.0168%" height="15" fill="rgb(249,174,33)" fg:x="159658766805" fg:w="136693493"/><text x="19.8438%" y="431.50"></text></g><g><title>realloc (98,425,396 samples, 0.01%)</title><rect x="19.5985%" y="405" width="0.0121%" height="15" fill="rgb(233,201,37)" fg:x="159697034902" fg:w="98425396"/><text x="19.8485%" y="415.50"></text></g><g><title>__rdl_alloc (965,610,517 samples, 0.12%)</title><rect x="19.6106%" y="453" width="0.1185%" height="15" fill="rgb(221,78,26)" fg:x="159795460298" fg:w="965610517"/><text x="19.8606%" y="463.50"></text></g><g><title>__rust_alloc (3,934,142,911 samples, 0.48%)</title><rect x="19.7291%" y="453" width="0.4828%" height="15" fill="rgb(250,127,30)" fg:x="160761070815" fg:w="3934142911"/><text x="19.9791%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,939,847,764 samples, 0.48%)</title><rect x="20.2129%" y="453" width="0.4835%" height="15" fill="rgb(230,49,44)" fg:x="164703183688" fg:w="3939847764"/><text x="20.4629%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (37,151,499,182 samples, 4.56%)</title><rect x="18.9290%" y="469" width="4.5593%" height="15" fill="rgb(229,67,23)" fg:x="154241542975" fg:w="37151499182"/><text x="19.1790%" y="479.50">alloc..</text></g><g><title>malloc (22,750,010,705 samples, 2.79%)</title><rect x="20.6964%" y="453" width="2.7919%" height="15" fill="rgb(249,83,47)" fg:x="168643031452" fg:w="22750010705"/><text x="20.9464%" y="463.50">ma..</text></g><g><title>core::alloc::layout::Layout::array (2,100,919,366 samples, 0.26%)</title><rect x="23.4888%" y="469" width="0.2578%" height="15" fill="rgb(215,43,3)" fg:x="191396831654" fg:w="2100919366"/><text x="23.7388%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2,100,919,366 samples, 0.26%)</title><rect x="23.4888%" y="453" width="0.2578%" height="15" fill="rgb(238,154,13)" fg:x="191396831654" fg:w="2100919366"/><text x="23.7388%" y="463.50"></text></g><g><title>core::cmp::max (3,859,138,100 samples, 0.47%)</title><rect x="23.7466%" y="469" width="0.4736%" height="15" fill="rgb(219,56,2)" fg:x="193497751020" fg:w="3859138100"/><text x="23.9966%" y="479.50"></text></g><g><title>core::cmp::Ord::max (3,859,138,100 samples, 0.47%)</title><rect x="23.7466%" y="453" width="0.4736%" height="15" fill="rgb(233,0,4)" fg:x="193497751020" fg:w="3859138100"/><text x="23.9966%" y="463.50"></text></g><g><title>core::cmp::max_by (3,859,138,100 samples, 0.47%)</title><rect x="23.7466%" y="437" width="0.4736%" height="15" fill="rgb(235,30,7)" fg:x="193497751020" fg:w="3859138100"/><text x="23.9966%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (47,424,929,871 samples, 5.82%)</title><rect x="18.5437%" y="485" width="5.8201%" height="15" fill="rgb(250,79,13)" fg:x="151102436557" fg:w="47424929871"/><text x="18.7937%" y="495.50">alloc::..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1,170,477,308 samples, 0.14%)</title><rect x="24.2202%" y="469" width="0.1436%" height="15" fill="rgb(211,146,34)" fg:x="197356889120" fg:w="1170477308"/><text x="24.4702%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1,170,477,308 samples, 0.14%)</title><rect x="24.2202%" y="453" width="0.1436%" height="15" fill="rgb(228,22,38)" fg:x="197356889120" fg:w="1170477308"/><text x="24.4702%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (51,620,502,187 samples, 6.34%)</title><rect x="18.0298%" y="533" width="6.3350%" height="15" fill="rgb(235,168,5)" fg:x="146914804355" fg:w="51620502187"/><text x="18.2798%" y="543.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (51,620,502,187 samples, 6.34%)</title><rect x="18.0298%" y="517" width="6.3350%" height="15" fill="rgb(221,155,16)" fg:x="146914804355" fg:w="51620502187"/><text x="18.2798%" y="527.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48,522,221,470 samples, 5.95%)</title><rect x="18.4101%" y="501" width="5.9548%" height="15" fill="rgb(215,215,53)" fg:x="150013085072" fg:w="48522221470"/><text x="18.6601%" y="511.50">alloc::r..</text></g><g><title>core::intrinsics::copy_nonoverlapping (8,353,774,880 samples, 1.03%)</title><rect x="24.3658%" y="533" width="1.0252%" height="15" fill="rgb(223,4,10)" fg:x="198543302778" fg:w="8353774880"/><text x="24.6158%" y="543.50"></text></g><g><title>[libc.so.6] (8,353,774,880 samples, 1.03%)</title><rect x="24.3658%" y="517" width="1.0252%" height="15" fill="rgb(234,103,6)" fg:x="198543302778" fg:w="8353774880"/><text x="24.6158%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (66,542,013,569 samples, 8.17%)</title><rect x="17.4474%" y="565" width="8.1662%" height="15" fill="rgb(227,97,0)" fg:x="142168613881" fg:w="66542013569"/><text x="17.6974%" y="575.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (66,542,013,569 samples, 8.17%)</title><rect x="17.4474%" y="549" width="8.1662%" height="15" fill="rgb(234,150,53)" fg:x="142168613881" fg:w="66542013569"/><text x="17.6974%" y="559.50">alloc::vec:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1,813,549,792 samples, 0.22%)</title><rect x="25.3910%" y="533" width="0.2226%" height="15" fill="rgb(228,201,54)" fg:x="206897077658" fg:w="1813549792"/><text x="25.6410%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (72,290,446,319 samples, 8.87%)</title><rect x="16.7453%" y="581" width="8.8717%" height="15" fill="rgb(222,22,37)" fg:x="136448031191" fg:w="72290446319"/><text x="16.9953%" y="591.50">alloc::vec::V..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,802,324,786 samples, 0.47%)</title><rect x="25.7670%" y="533" width="0.4666%" height="15" fill="rgb(237,53,32)" fg:x="209960997600" fg:w="3802324786"/><text x="26.0170%" y="543.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;usize&gt;::into_slice_range (397,127,834 samples, 0.05%)</title><rect x="26.2337%" y="533" width="0.0487%" height="15" fill="rgb(233,25,53)" fg:x="213763322386" fg:w="397127834"/><text x="26.4837%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5,425,963,398 samples, 0.67%)</title><rect x="25.6170%" y="581" width="0.6659%" height="15" fill="rgb(210,40,34)" fg:x="208738477510" fg:w="5425963398"/><text x="25.8670%" y="591.50"></text></g><g><title>&lt;core::ops::range::RangeToInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,425,963,398 samples, 0.67%)</title><rect x="25.6170%" y="565" width="0.6659%" height="15" fill="rgb(241,220,44)" fg:x="208738477510" fg:w="5425963398"/><text x="25.8670%" y="575.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5,425,963,398 samples, 0.67%)</title><rect x="25.6170%" y="549" width="0.6659%" height="15" fill="rgb(235,28,35)" fg:x="208738477510" fg:w="5425963398"/><text x="25.8670%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (4,699,675,720 samples, 0.58%)</title><rect x="32.3807%" y="549" width="0.5768%" height="15" fill="rgb(210,56,17)" fg:x="263852127573" fg:w="4699675720"/><text x="32.6307%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (923,088,803 samples, 0.11%)</title><rect x="32.9575%" y="549" width="0.1133%" height="15" fill="rgb(224,130,29)" fg:x="268551803293" fg:w="923088803"/><text x="33.2075%" y="559.50"></text></g><g><title>core::ptr::align_offset (923,088,803 samples, 0.11%)</title><rect x="32.9575%" y="533" width="0.1133%" height="15" fill="rgb(235,212,8)" fg:x="268551803293" fg:w="923088803"/><text x="33.2075%" y="543.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (4,754,831,368 samples, 0.58%)</title><rect x="33.0708%" y="549" width="0.5835%" height="15" fill="rgb(223,33,50)" fg:x="269474892096" fg:w="4754831368"/><text x="33.3208%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (897,192,626 samples, 0.11%)</title><rect x="33.5442%" y="533" width="0.1101%" height="15" fill="rgb(219,149,13)" fg:x="273332530838" fg:w="897192626"/><text x="33.7942%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_naive (37,061,863,353 samples, 4.55%)</title><rect x="33.6543%" y="549" width="4.5483%" height="15" fill="rgb(250,156,29)" fg:x="274229723464" fg:w="37061863353"/><text x="33.9043%" y="559.50">core:..</text></g><g><title>core::slice::memchr::memchr_aligned (96,181,287,562 samples, 11.80%)</title><rect x="26.3995%" y="565" width="11.8037%" height="15" fill="rgb(216,193,19)" fg:x="215114256983" fg:w="96181287562"/><text x="26.6495%" y="575.50">core::slice::memch..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (309,635,255,313 samples, 38.00%)</title><rect x="0.2123%" y="661" width="37.9994%" height="15" fill="rgb(216,135,14)" fg:x="1729960621" fg:w="309635255313"/><text x="0.4623%" y="671.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;:..</text></g><g><title>std::io::BufRead::read_line (292,905,364,183 samples, 35.95%)</title><rect x="2.2654%" y="645" width="35.9462%" height="15" fill="rgb(241,47,5)" fg:x="18459851751" fg:w="292905364183"/><text x="2.5154%" y="655.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (292,905,364,183 samples, 35.95%)</title><rect x="2.2654%" y="629" width="35.9462%" height="15" fill="rgb(233,42,35)" fg:x="18459851751" fg:w="292905364183"/><text x="2.5154%" y="639.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::{{closure}} (209,318,693,289 samples, 25.69%)</title><rect x="12.5235%" y="613" width="25.6882%" height="15" fill="rgb(231,13,6)" fg:x="102046522645" fg:w="209318693289"/><text x="12.7735%" y="623.50">std::io::BufRead::read_line::{{closure}}</text></g><g><title>std::io::read_until (209,318,693,289 samples, 25.69%)</title><rect x="12.5235%" y="597" width="25.6882%" height="15" fill="rgb(207,181,40)" fg:x="102046522645" fg:w="209318693289"/><text x="12.7735%" y="607.50">std::io::read_until</text></g><g><title>core::slice::memchr::memchr (97,200,775,026 samples, 11.93%)</title><rect x="26.2829%" y="581" width="11.9288%" height="15" fill="rgb(254,173,49)" fg:x="214164440908" fg:w="97200775026"/><text x="26.5329%" y="591.50">core::slice::memch..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (313,263,966,152 samples, 38.44%)</title><rect x="0.0213%" y="677" width="38.4447%" height="15" fill="rgb(221,1,38)" fg:x="173871072" fg:w="313263966152"/><text x="0.2713%" y="687.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,068,663,312 samples, 0.25%)</title><rect x="38.2122%" y="661" width="0.2539%" height="15" fill="rgb(206,124,46)" fg:x="311369173912" fg:w="2068663312"/><text x="38.4622%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (126,016,820 samples, 0.02%)</title><rect x="38.4506%" y="645" width="0.0155%" height="15" fill="rgb(249,21,11)" fg:x="313311820404" fg:w="126016820"/><text x="38.7006%" y="655.50"></text></g><g><title>brc::main::{{closure}} (126,016,820 samples, 0.02%)</title><rect x="38.4506%" y="629" width="0.0155%" height="15" fill="rgb(222,201,40)" fg:x="313311820404" fg:w="126016820"/><text x="38.7006%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (126,016,820 samples, 0.02%)</title><rect x="38.4506%" y="613" width="0.0155%" height="15" fill="rgb(235,61,29)" fg:x="313311820404" fg:w="126016820"/><text x="38.7006%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,079,478,401 samples, 0.13%)</title><rect x="51.8516%" y="597" width="0.1325%" height="15" fill="rgb(219,207,3)" fg:x="422509092141" fg:w="1079478401"/><text x="52.1016%" y="607.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (1,079,478,401 samples, 0.13%)</title><rect x="51.8516%" y="581" width="0.1325%" height="15" fill="rgb(222,56,46)" fg:x="422509092141" fg:w="1079478401"/><text x="52.1016%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (1,079,478,401 samples, 0.13%)</title><rect x="51.8516%" y="565" width="0.1325%" height="15" fill="rgb(239,76,54)" fg:x="422509092141" fg:w="1079478401"/><text x="52.1016%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (220,682,327 samples, 0.03%)</title><rect x="51.9570%" y="549" width="0.0271%" height="15" fill="rgb(231,124,27)" fg:x="423367888215" fg:w="220682327"/><text x="52.2070%" y="559.50"></text></g><g><title>hrtimer_interrupt (89,961,075 samples, 0.01%)</title><rect x="51.9914%" y="549" width="0.0110%" height="15" fill="rgb(249,195,6)" fg:x="423648343469" fg:w="89961075"/><text x="52.2414%" y="559.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (109,890,407 samples, 0.01%)</title><rect x="51.9894%" y="597" width="0.0135%" height="15" fill="rgb(237,174,47)" fg:x="423632399211" fg:w="109890407"/><text x="52.2394%" y="607.50"></text></g><g><title>sysvec_apic_timer_interrupt (109,890,407 samples, 0.01%)</title><rect x="51.9894%" y="581" width="0.0135%" height="15" fill="rgb(206,201,31)" fg:x="423632399211" fg:w="109890407"/><text x="52.2394%" y="591.50"></text></g><g><title>__sysvec_apic_timer_interrupt (93,946,149 samples, 0.01%)</title><rect x="51.9914%" y="565" width="0.0115%" height="15" fill="rgb(231,57,52)" fg:x="423648343469" fg:w="93946149"/><text x="52.2414%" y="575.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,610,529,025 samples, 0.32%)</title><rect x="52.0078%" y="597" width="0.3204%" height="15" fill="rgb(248,177,22)" fg:x="423781845150" fg:w="2610529025"/><text x="52.2578%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,610,529,025 samples, 0.32%)</title><rect x="52.0078%" y="581" width="0.3204%" height="15" fill="rgb(215,211,37)" fg:x="423781845150" fg:w="2610529025"/><text x="52.2578%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (964,281,724 samples, 0.12%)</title><rect x="52.2098%" y="565" width="0.1183%" height="15" fill="rgb(241,128,51)" fg:x="425428092451" fg:w="964281724"/><text x="52.4598%" y="575.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (101,376,051,237 samples, 12.44%)</title><rect x="40.9518%" y="629" width="12.4412%" height="15" fill="rgb(227,165,31)" fg:x="333692535565" fg:w="101376051237"/><text x="41.2018%" y="639.50">&lt;core::str::pattern..</text></g><g><title>core::str::pattern::TwoWaySearcher::next (92,689,772,361 samples, 11.38%)</title><rect x="42.0178%" y="613" width="11.3752%" height="15" fill="rgb(228,167,24)" fg:x="342378814441" fg:w="92689772361"/><text x="42.2678%" y="623.50">core::str::patter..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (8,676,212,627 samples, 1.06%)</title><rect x="52.3282%" y="597" width="1.0648%" height="15" fill="rgb(228,143,12)" fg:x="426392374175" fg:w="8676212627"/><text x="52.5782%" y="607.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (8,676,212,627 samples, 1.06%)</title><rect x="52.3282%" y="581" width="1.0648%" height="15" fill="rgb(249,149,8)" fg:x="426392374175" fg:w="8676212627"/><text x="52.5782%" y="591.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1,089,004,817 samples, 0.13%)</title><rect x="53.3973%" y="629" width="0.1336%" height="15" fill="rgb(243,35,44)" fg:x="435104357509" fg:w="1089004817"/><text x="53.6473%" y="639.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1,089,004,817 samples, 0.13%)</title><rect x="53.3973%" y="613" width="0.1336%" height="15" fill="rgb(246,89,9)" fg:x="435104357509" fg:w="1089004817"/><text x="53.6473%" y="623.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (126,675,044,430 samples, 15.55%)</title><rect x="38.6117%" y="661" width="15.5459%" height="15" fill="rgb(233,213,13)" fg:x="314624821684" fg:w="126675044430"/><text x="38.8617%" y="671.50">&lt;core::str::iter::Split&lt;..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (125,486,405,634 samples, 15.40%)</title><rect x="38.7576%" y="645" width="15.4001%" height="15" fill="rgb(233,141,41)" fg:x="315813460480" fg:w="125486405634"/><text x="39.0076%" y="655.50">core::str::iter::SplitIn..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (5,106,503,788 samples, 0.63%)</title><rect x="53.5310%" y="629" width="0.6267%" height="15" fill="rgb(239,167,4)" fg:x="436193362326" fg:w="5106503788"/><text x="53.7810%" y="639.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (545,122,232 samples, 0.07%)</title><rect x="54.0907%" y="613" width="0.0669%" height="15" fill="rgb(209,217,16)" fg:x="440754743882" fg:w="545122232"/><text x="54.3407%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (545,122,232 samples, 0.07%)</title><rect x="54.0907%" y="597" width="0.0669%" height="15" fill="rgb(219,88,35)" fg:x="440754743882" fg:w="545122232"/><text x="54.3407%" y="607.50"></text></g><g><title>__rdl_alloc (1,034,973,713 samples, 0.13%)</title><rect x="54.4598%" y="437" width="0.1270%" height="15" fill="rgb(220,193,23)" fg:x="443762029679" fg:w="1034973713"/><text x="54.7098%" y="447.50"></text></g><g><title>__rust_alloc (3,255,731,431 samples, 0.40%)</title><rect x="54.5868%" y="437" width="0.3996%" height="15" fill="rgb(230,90,52)" fg:x="444797003392" fg:w="3255731431"/><text x="54.8368%" y="447.50"></text></g><g><title>core::ptr::read_volatile (3,104,773,563 samples, 0.38%)</title><rect x="54.9864%" y="437" width="0.3810%" height="15" fill="rgb(252,106,19)" fg:x="448052734823" fg:w="3104773563"/><text x="55.2364%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27,429,944,025 samples, 3.37%)</title><rect x="54.4598%" y="485" width="3.3663%" height="15" fill="rgb(206,74,20)" fg:x="443762029679" fg:w="27429944025"/><text x="54.7098%" y="495.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (27,429,944,025 samples, 3.37%)</title><rect x="54.4598%" y="469" width="3.3663%" height="15" fill="rgb(230,138,44)" fg:x="443762029679" fg:w="27429944025"/><text x="54.7098%" y="479.50">all..</text></g><g><title>alloc::alloc::alloc (27,429,944,025 samples, 3.37%)</title><rect x="54.4598%" y="453" width="3.3663%" height="15" fill="rgb(235,182,43)" fg:x="443762029679" fg:w="27429944025"/><text x="54.7098%" y="463.50">all..</text></g><g><title>malloc (20,034,465,318 samples, 2.46%)</title><rect x="55.3674%" y="437" width="2.4587%" height="15" fill="rgb(242,16,51)" fg:x="451157508386" fg:w="20034465318"/><text x="55.6174%" y="447.50">ma..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29,594,440,036 samples, 3.63%)</title><rect x="54.1947%" y="533" width="3.6319%" height="15" fill="rgb(248,9,4)" fg:x="441601493762" fg:w="29594440036"/><text x="54.4447%" y="543.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29,594,440,036 samples, 3.63%)</title><rect x="54.1947%" y="517" width="3.6319%" height="15" fill="rgb(210,31,22)" fg:x="441601493762" fg:w="29594440036"/><text x="54.4447%" y="527.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (29,594,440,036 samples, 3.63%)</title><rect x="54.1947%" y="501" width="3.6319%" height="15" fill="rgb(239,54,39)" fg:x="441601493762" fg:w="29594440036"/><text x="54.4447%" y="511.50">allo..</text></g><g><title>[libc.so.6] (3,931,091,127 samples, 0.48%)</title><rect x="57.9115%" y="501" width="0.4824%" height="15" fill="rgb(230,99,41)" fg:x="471887907933" fg:w="3931091127"/><text x="58.1615%" y="511.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="661" width="4.2382%" height="15" fill="rgb(253,106,12)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="671.50">&lt;str ..</text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="645" width="4.2382%" height="15" fill="rgb(213,46,41)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="655.50">&lt;allo..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="629" width="4.2382%" height="15" fill="rgb(215,133,35)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="639.50">alloc..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="613" width="4.2382%" height="15" fill="rgb(213,28,5)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="623.50">alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="597" width="4.2382%" height="15" fill="rgb(215,77,49)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="607.50">alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="581" width="4.2382%" height="15" fill="rgb(248,100,22)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="591.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="565" width="4.2382%" height="15" fill="rgb(208,67,9)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="575.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34,535,024,187 samples, 4.24%)</title><rect x="54.1576%" y="549" width="4.2382%" height="15" fill="rgb(219,133,21)" fg:x="441299866114" fg:w="34535024187"/><text x="54.4076%" y="559.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4,638,956,503 samples, 0.57%)</title><rect x="57.8266%" y="533" width="0.5693%" height="15" fill="rgb(246,46,29)" fg:x="471195933798" fg:w="4638956503"/><text x="58.0766%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,638,956,503 samples, 0.57%)</title><rect x="57.8266%" y="517" width="0.5693%" height="15" fill="rgb(246,185,52)" fg:x="471195933798" fg:w="4638956503"/><text x="58.0766%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (316,077,434 samples, 0.04%)</title><rect x="58.3959%" y="661" width="0.0388%" height="15" fill="rgb(252,136,11)" fg:x="475834890301" fg:w="316077434"/><text x="58.6459%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3,677,217,127 samples, 0.45%)</title><rect x="58.4347%" y="661" width="0.4513%" height="15" fill="rgb(219,138,53)" fg:x="476150967735" fg:w="3677217127"/><text x="58.6847%" y="671.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (529,636,300 samples, 0.06%)</title><rect x="61.6316%" y="597" width="0.0650%" height="15" fill="rgb(211,51,23)" fg:x="502201077135" fg:w="529636300"/><text x="61.8816%" y="607.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (13,805,481,175 samples, 1.69%)</title><rect x="61.6971%" y="597" width="1.6943%" height="15" fill="rgb(247,221,28)" fg:x="502734677081" fg:w="13805481175"/><text x="61.9471%" y="607.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (15,667,696,301 samples, 1.92%)</title><rect x="61.5814%" y="613" width="1.9228%" height="15" fill="rgb(251,222,45)" fg:x="501791531926" fg:w="15667696301"/><text x="61.8314%" y="623.50">c..</text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (919,069,971 samples, 0.11%)</title><rect x="63.3914%" y="597" width="0.1128%" height="15" fill="rgb(217,162,53)" fg:x="516540158256" fg:w="919069971"/><text x="63.6414%" y="607.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (1,418,450,157 samples, 0.17%)</title><rect x="67.5225%" y="549" width="0.1741%" height="15" fill="rgb(229,93,14)" fg:x="550202725967" fg:w="1418450157"/><text x="67.7725%" y="559.50"></text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (15,709,041,127 samples, 1.93%)</title><rect x="65.9125%" y="565" width="1.9279%" height="15" fill="rgb(209,67,49)" fg:x="537083366316" fg:w="15709041127"/><text x="66.1625%" y="575.50">&lt;..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (1,171,231,319 samples, 0.14%)</title><rect x="67.6966%" y="549" width="0.1437%" height="15" fill="rgb(213,87,29)" fg:x="551621176124" fg:w="1171231319"/><text x="67.9466%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (103,446,443 samples, 0.01%)</title><rect x="67.8277%" y="533" width="0.0127%" height="15" fill="rgb(205,151,52)" fg:x="552688961000" fg:w="103446443"/><text x="68.0777%" y="543.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (16,492,459,242 samples, 2.02%)</title><rect x="65.8173%" y="581" width="2.0240%" height="15" fill="rgb(253,215,39)" fg:x="536307882230" fg:w="16492459242"/><text x="66.0673%" y="591.50">c..</text></g><g><title>core::num::dec2flt::parse::parse_number (35,972,199,508 samples, 4.41%)</title><rect x="63.5042%" y="613" width="4.4146%" height="15" fill="rgb(221,220,41)" fg:x="517459228227" fg:w="35972199508"/><text x="63.7542%" y="623.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (20,255,096,667 samples, 2.49%)</title><rect x="65.4330%" y="597" width="2.4858%" height="15" fill="rgb(218,133,21)" fg:x="533176331068" fg:w="20255096667"/><text x="65.6830%" y="607.50">co..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (631,086,263 samples, 0.08%)</title><rect x="67.8413%" y="581" width="0.0774%" height="15" fill="rgb(221,193,43)" fg:x="552800341472" fg:w="631086263"/><text x="68.0913%" y="591.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (74,585,525,318 samples, 9.15%)</title><rect x="58.8860%" y="661" width="9.1534%" height="15" fill="rgb(240,128,52)" fg:x="479828184862" fg:w="74585525318"/><text x="59.1360%" y="671.50">core::str::&lt;i..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f32&gt;::from_str (74,585,525,318 samples, 9.15%)</title><rect x="58.8860%" y="645" width="9.1534%" height="15" fill="rgb(253,114,12)" fg:x="479828184862" fg:w="74585525318"/><text x="59.1360%" y="655.50">core::num::de..</text></g><g><title>core::num::dec2flt::dec2flt (70,779,685,835 samples, 8.69%)</title><rect x="59.3530%" y="629" width="8.6863%" height="15" fill="rgb(215,223,47)" fg:x="483634024345" fg:w="70779685835"/><text x="59.6030%" y="639.50">core::num::d..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (982,282,445 samples, 0.12%)</title><rect x="67.9188%" y="613" width="0.1205%" height="15" fill="rgb(248,225,23)" fg:x="553431427735" fg:w="982282445"/><text x="68.1688%" y="623.50"></text></g><g><title>core::cmp::max (1,454,337,308 samples, 0.18%)</title><rect x="71.2449%" y="597" width="0.1785%" height="15" fill="rgb(250,108,0)" fg:x="580533894904" fg:w="1454337308"/><text x="71.4949%" y="607.50"></text></g><g><title>core::cmp::Ord::max (1,454,337,308 samples, 0.18%)</title><rect x="71.2449%" y="581" width="0.1785%" height="15" fill="rgb(228,208,7)" fg:x="580533894904" fg:w="1454337308"/><text x="71.4949%" y="591.50"></text></g><g><title>core::cmp::max_by (1,454,337,308 samples, 0.18%)</title><rect x="71.2449%" y="565" width="0.1785%" height="15" fill="rgb(244,45,10)" fg:x="580533894904" fg:w="1454337308"/><text x="71.4949%" y="575.50"></text></g><g><title>[libc.so.6] (2,243,433,433 samples, 0.28%)</title><rect x="71.6760%" y="565" width="0.2753%" height="15" fill="rgb(207,125,25)" fg:x="584047239394" fg:w="2243433433"/><text x="71.9260%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,306,400,184 samples, 0.53%)</title><rect x="71.4233%" y="597" width="0.5285%" height="15" fill="rgb(210,195,18)" fg:x="581988232212" fg:w="4306400184"/><text x="71.6733%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,306,400,184 samples, 0.53%)</title><rect x="71.4233%" y="581" width="0.5285%" height="15" fill="rgb(249,80,12)" fg:x="581988232212" fg:w="4306400184"/><text x="71.6733%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,076,935,648 samples, 0.13%)</title><rect x="71.9518%" y="581" width="0.1322%" height="15" fill="rgb(221,65,9)" fg:x="586294632396" fg:w="1076935648"/><text x="72.2018%" y="591.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,981,469,791 samples, 0.24%)</title><rect x="71.9518%" y="597" width="0.2432%" height="15" fill="rgb(235,49,36)" fg:x="586294632396" fg:w="1981469791"/><text x="72.2018%" y="607.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (904,534,143 samples, 0.11%)</title><rect x="72.0840%" y="581" width="0.1110%" height="15" fill="rgb(225,32,20)" fg:x="587371568044" fg:w="904534143"/><text x="72.3340%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (904,534,143 samples, 0.11%)</title><rect x="72.0840%" y="565" width="0.1110%" height="15" fill="rgb(215,141,46)" fg:x="587371568044" fg:w="904534143"/><text x="72.3340%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (538,952,886 samples, 0.07%)</title><rect x="72.8579%" y="565" width="0.0661%" height="15" fill="rgb(250,160,47)" fg:x="593677213494" fg:w="538952886"/><text x="73.1079%" y="575.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create (9,055,861,585 samples, 1.11%)</title><rect x="72.1950%" y="597" width="1.1114%" height="15" fill="rgb(216,222,40)" fg:x="588276102187" fg:w="9055861585"/><text x="72.4450%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,055,861,585 samples, 1.11%)</title><rect x="72.1950%" y="581" width="1.1114%" height="15" fill="rgb(234,217,39)" fg:x="588276102187" fg:w="9055861585"/><text x="72.4450%" y="591.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::byteset_create::{{closure}} (3,083,890,574 samples, 0.38%)</title><rect x="72.9279%" y="565" width="0.3785%" height="15" fill="rgb(207,178,40)" fg:x="594248073198" fg:w="3083890574"/><text x="73.1779%" y="575.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::into_searcher (43,867,935,335 samples, 5.38%)</title><rect x="68.2441%" y="645" width="5.3836%" height="15" fill="rgb(221,136,13)" fg:x="556082189442" fg:w="43867935335"/><text x="68.4941%" y="655.50">&lt;&amp;str a..</text></g><g><title>core::str::pattern::StrSearcher::new (38,808,290,152 samples, 4.76%)</title><rect x="68.8650%" y="629" width="4.7627%" height="15" fill="rgb(249,199,10)" fg:x="561141834625" fg:w="38808290152"/><text x="69.1150%" y="639.50">core::..</text></g><g><title>core::str::pattern::TwoWaySearcher::new (24,087,141,545 samples, 2.96%)</title><rect x="70.6716%" y="613" width="2.9560%" height="15" fill="rgb(249,222,13)" fg:x="575862983232" fg:w="24087141545"/><text x="70.9216%" y="623.50">cor..</text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (2,598,215,139 samples, 0.32%)</title><rect x="73.3088%" y="597" width="0.3189%" height="15" fill="rgb(244,185,38)" fg:x="597351909638" fg:w="2598215139"/><text x="73.5588%" y="607.50"></text></g><g><title>brc::process_data (286,524,281,476 samples, 35.16%)</title><rect x="38.4660%" y="677" width="35.1631%" height="15" fill="rgb(236,202,9)" fg:x="313437837224" fg:w="286524281476"/><text x="38.7160%" y="687.50">brc::process_data</text></g><g><title>core::str::&lt;impl str&gt;::split (45,548,408,520 samples, 5.59%)</title><rect x="68.0393%" y="661" width="5.5898%" height="15" fill="rgb(250,229,37)" fg:x="554413710180" fg:w="45548408520"/><text x="68.2893%" y="671.50">core::s..</text></g><g><title>[libc.so.6] (16,904,813,997 samples, 2.07%)</title><rect x="74.4433%" y="565" width="2.0746%" height="15" fill="rgb(206,174,23)" fg:x="606595883859" fg:w="16904813997"/><text x="74.6933%" y="575.50">[..</text></g><g><title>__libc_free (23,335,876,151 samples, 2.86%)</title><rect x="73.6545%" y="581" width="2.8638%" height="15" fill="rgb(211,33,43)" fg:x="600168809409" fg:w="23335876151"/><text x="73.9045%" y="591.50">__..</text></g><g><title>__rdl_dealloc (3,276,767,361 samples, 0.40%)</title><rect x="76.5184%" y="581" width="0.4021%" height="15" fill="rgb(245,58,50)" fg:x="623504685560" fg:w="3276767361"/><text x="76.7684%" y="591.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,222,556,953 samples, 0.27%)</title><rect x="76.6477%" y="565" width="0.2728%" height="15" fill="rgb(244,68,36)" fg:x="624558895968" fg:w="2222556953"/><text x="76.8977%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28,001,707,332 samples, 3.44%)</title><rect x="73.6296%" y="613" width="3.4365%" height="15" fill="rgb(232,229,15)" fg:x="599966102599" fg:w="28001707332"/><text x="73.8796%" y="623.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (28,001,707,332 samples, 3.44%)</title><rect x="73.6296%" y="597" width="3.4365%" height="15" fill="rgb(254,30,23)" fg:x="599966102599" fg:w="28001707332"/><text x="73.8796%" y="607.50">all..</text></g><g><title>__rust_dealloc (1,186,357,010 samples, 0.15%)</title><rect x="76.9205%" y="581" width="0.1456%" height="15" fill="rgb(235,160,14)" fg:x="626781452921" fg:w="1186357010"/><text x="77.1705%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (28,813,016,602 samples, 3.54%)</title><rect x="73.6296%" y="677" width="3.5360%" height="15" fill="rgb(212,155,44)" fg:x="599966102599" fg:w="28813016602"/><text x="73.8796%" y="687.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (28,813,016,602 samples, 3.54%)</title><rect x="73.6296%" y="661" width="3.5360%" height="15" fill="rgb(226,2,50)" fg:x="599966102599" fg:w="28813016602"/><text x="73.8796%" y="671.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (28,813,016,602 samples, 3.54%)</title><rect x="73.6296%" y="645" width="3.5360%" height="15" fill="rgb(234,177,6)" fg:x="599966102599" fg:w="28813016602"/><text x="73.8796%" y="655.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28,813,016,602 samples, 3.54%)</title><rect x="73.6296%" y="629" width="3.5360%" height="15" fill="rgb(217,24,9)" fg:x="599966102599" fg:w="28813016602"/><text x="73.8796%" y="639.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (811,309,270 samples, 0.10%)</title><rect x="77.0661%" y="613" width="0.0996%" height="15" fill="rgb(220,13,46)" fg:x="627967809931" fg:w="811309270"/><text x="77.3161%" y="623.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (446,559,791 samples, 0.05%)</title><rect x="77.3860%" y="629" width="0.0548%" height="15" fill="rgb(239,221,27)" fg:x="630574088128" fg:w="446559791"/><text x="77.6360%" y="639.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::max (1,216,752,234 samples, 0.15%)</title><rect x="77.4408%" y="629" width="0.1493%" height="15" fill="rgb(222,198,25)" fg:x="631020647919" fg:w="1216752234"/><text x="77.6908%" y="639.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (4,527,141,224 samples, 0.56%)</title><rect x="77.1657%" y="677" width="0.5556%" height="15" fill="rgb(211,99,13)" fg:x="628779119201" fg:w="4527141224"/><text x="77.4157%" y="687.50"></text></g><g><title>brc::main::{{closure}} (4,527,141,224 samples, 0.56%)</title><rect x="77.1657%" y="661" width="0.5556%" height="15" fill="rgb(232,111,31)" fg:x="628779119201" fg:w="4527141224"/><text x="77.4157%" y="671.50"></text></g><g><title>brc::Data::update (4,527,141,224 samples, 0.56%)</title><rect x="77.1657%" y="645" width="0.5556%" height="15" fill="rgb(245,82,37)" fg:x="628779119201" fg:w="4527141224"/><text x="77.4157%" y="655.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::min (1,068,860,272 samples, 0.13%)</title><rect x="77.5901%" y="629" width="0.1312%" height="15" fill="rgb(227,149,46)" fg:x="632237400153" fg:w="1068860272"/><text x="77.8401%" y="639.50"></text></g><g><title>[libc.so.6] (11,204,987,139 samples, 1.38%)</title><rect x="78.1561%" y="485" width="1.3751%" height="15" fill="rgb(218,36,50)" fg:x="636849891619" fg:w="11204987139"/><text x="78.4061%" y="495.50"></text></g><g><title>__libc_free (14,235,795,235 samples, 1.75%)</title><rect x="77.7852%" y="501" width="1.7471%" height="15" fill="rgb(226,80,48)" fg:x="633827035277" fg:w="14235795235"/><text x="78.0352%" y="511.50"></text></g><g><title>__rdl_dealloc (2,249,261,940 samples, 0.28%)</title><rect x="79.5322%" y="501" width="0.2760%" height="15" fill="rgb(238,224,15)" fg:x="648062830512" fg:w="2249261940"/><text x="79.7822%" y="511.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,266,408,679 samples, 0.16%)</title><rect x="79.6528%" y="485" width="0.1554%" height="15" fill="rgb(241,136,10)" fg:x="649045683773" fg:w="1266408679"/><text x="79.9028%" y="495.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (18,460,978,351 samples, 2.27%)</title><rect x="77.7213%" y="677" width="2.2656%" height="15" fill="rgb(208,32,45)" fg:x="633306260425" fg:w="18460978351"/><text x="77.9713%" y="687.50">s..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (18,460,978,351 samples, 2.27%)</title><rect x="77.7213%" y="661" width="2.2656%" height="15" fill="rgb(207,135,9)" fg:x="633306260425" fg:w="18460978351"/><text x="77.9713%" y="671.50">s..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (18,460,978,351 samples, 2.27%)</title><rect x="77.7213%" y="645" width="2.2656%" height="15" fill="rgb(206,86,44)" fg:x="633306260425" fg:w="18460978351"/><text x="77.9713%" y="655.50">h..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::string::String,brc::Data&gt;&gt; (18,460,978,351 samples, 2.27%)</title><rect x="77.7213%" y="629" width="2.2656%" height="15" fill="rgb(245,177,15)" fg:x="633306260425" fg:w="18460978351"/><text x="77.9713%" y="639.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (18,460,978,351 samples, 2.27%)</title><rect x="77.7213%" y="613" width="2.2656%" height="15" fill="rgb(206,64,50)" fg:x="633306260425" fg:w="18460978351"/><text x="77.9713%" y="623.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="597" width="2.2646%" height="15" fill="rgb(234,36,40)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="581" width="2.2646%" height="15" fill="rgb(213,64,8)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="565" width="2.2646%" height="15" fill="rgb(210,75,36)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="575.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="549" width="2.2646%" height="15" fill="rgb(229,88,21)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="559.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="533" width="2.2646%" height="15" fill="rgb(252,204,47)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="543.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (18,452,979,720 samples, 2.26%)</title><rect x="77.7222%" y="517" width="2.2646%" height="15" fill="rgb(208,77,27)" fg:x="633314259056" fg:w="18452979720"/><text x="77.9722%" y="527.50">a..</text></g><g><title>__rust_dealloc (1,455,146,324 samples, 0.18%)</title><rect x="79.8083%" y="501" width="0.1786%" height="15" fill="rgb(221,76,26)" fg:x="650312092452" fg:w="1455146324"/><text x="80.0583%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,376,520,727 samples, 0.29%)</title><rect x="82.5559%" y="549" width="0.2917%" height="15" fill="rgb(225,139,18)" fg:x="672701235357" fg:w="2376520727"/><text x="82.8059%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,604,943,327 samples, 0.69%)</title><rect x="82.3352%" y="565" width="0.6879%" height="15" fill="rgb(230,137,11)" fg:x="670902991678" fg:w="5604943327"/><text x="82.5852%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,430,178,921 samples, 0.18%)</title><rect x="82.8476%" y="549" width="0.1755%" height="15" fill="rgb(212,28,1)" fg:x="675077756084" fg:w="1430178921"/><text x="83.0976%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10,789,429,531 samples, 1.32%)</title><rect x="83.4899%" y="549" width="1.3241%" height="15" fill="rgb(248,164,17)" fg:x="680311945274" fg:w="10789429531"/><text x="83.7399%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (18,607,250,588 samples, 2.28%)</title><rect x="83.0231%" y="565" width="2.2835%" height="15" fill="rgb(222,171,42)" fg:x="676507935005" fg:w="18607250588"/><text x="83.2731%" y="575.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,013,810,788 samples, 0.49%)</title><rect x="84.8140%" y="549" width="0.4926%" height="15" fill="rgb(243,84,45)" fg:x="691101374805" fg:w="4013810788"/><text x="85.0640%" y="559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (36,320,269,490 samples, 4.46%)</title><rect x="80.8556%" y="613" width="4.4573%" height="15" fill="rgb(252,49,23)" fg:x="658846608648" fg:w="36320269490"/><text x="81.1056%" y="623.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (36,320,269,490 samples, 4.46%)</title><rect x="80.8556%" y="597" width="4.4573%" height="15" fill="rgb(215,19,7)" fg:x="658846608648" fg:w="36320269490"/><text x="81.1056%" y="607.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (36,320,269,490 samples, 4.46%)</title><rect x="80.8556%" y="581" width="4.4573%" height="15" fill="rgb(238,81,41)" fg:x="658846608648" fg:w="36320269490"/><text x="81.1056%" y="591.50">&lt;core..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,286,578,767 samples, 0.16%)</title><rect x="85.3130%" y="613" width="0.1579%" height="15" fill="rgb(210,199,37)" fg:x="695166878138" fg:w="1286578767"/><text x="85.5630%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,270,594,365 samples, 0.16%)</title><rect x="85.3149%" y="597" width="0.1559%" height="15" fill="rgb(244,192,49)" fg:x="695182862540" fg:w="1270594365"/><text x="85.5649%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,270,594,365 samples, 0.16%)</title><rect x="85.3149%" y="581" width="0.1559%" height="15" fill="rgb(226,211,11)" fg:x="695182862540" fg:w="1270594365"/><text x="85.5649%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,270,594,365 samples, 0.16%)</title><rect x="85.3149%" y="565" width="0.1559%" height="15" fill="rgb(236,162,54)" fg:x="695182862540" fg:w="1270594365"/><text x="85.5649%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,807,064,782 samples, 0.22%)</title><rect x="87.7061%" y="485" width="0.2218%" height="15" fill="rgb(220,229,9)" fg:x="714667421463" fg:w="1807064782"/><text x="87.9561%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,253,742,981 samples, 0.40%)</title><rect x="87.5948%" y="501" width="0.3993%" height="15" fill="rgb(250,87,22)" fg:x="713760484000" fg:w="3253742981"/><text x="87.8448%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (539,740,736 samples, 0.07%)</title><rect x="87.9279%" y="485" width="0.0662%" height="15" fill="rgb(239,43,17)" fg:x="716474486245" fg:w="539740736"/><text x="88.1779%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,556,312,669 samples, 0.68%)</title><rect x="89.9616%" y="485" width="0.6819%" height="15" fill="rgb(231,177,25)" fg:x="733045633952" fg:w="5556312669"/><text x="90.2116%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (21,616,022,124 samples, 2.65%)</title><rect x="88.0024%" y="501" width="2.6528%" height="15" fill="rgb(219,179,1)" fg:x="717081262388" fg:w="21616022124"/><text x="88.2524%" y="511.50">co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (95,337,891 samples, 0.01%)</title><rect x="90.6435%" y="485" width="0.0117%" height="15" fill="rgb(238,219,53)" fg:x="738601946621" fg:w="95337891"/><text x="90.8935%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40,903,502,015 samples, 5.02%)</title><rect x="85.6358%" y="517" width="5.0198%" height="15" fill="rgb(232,167,36)" fg:x="697797792537" fg:w="40903502015"/><text x="85.8858%" y="527.50">&lt;core:..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (443,275,597 samples, 0.05%)</title><rect x="91.7128%" y="469" width="0.0544%" height="15" fill="rgb(244,19,51)" fg:x="747315041302" fg:w="443275597"/><text x="91.9628%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,417,501,930 samples, 0.17%)</title><rect x="91.6770%" y="485" width="0.1740%" height="15" fill="rgb(224,6,22)" fg:x="747023608312" fg:w="1417501930"/><text x="91.9270%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (682,793,343 samples, 0.08%)</title><rect x="91.7672%" y="469" width="0.0838%" height="15" fill="rgb(224,145,5)" fg:x="747758316899" fg:w="682793343"/><text x="92.0172%" y="479.50"></text></g><g><title>core::cmp::min (290,334,700 samples, 0.04%)</title><rect x="91.8532%" y="485" width="0.0356%" height="15" fill="rgb(234,130,49)" fg:x="748459621735" fg:w="290334700"/><text x="92.1032%" y="495.50"></text></g><g><title>core::cmp::Ord::min (290,334,700 samples, 0.04%)</title><rect x="91.8532%" y="469" width="0.0356%" height="15" fill="rgb(254,6,2)" fg:x="748459621735" fg:w="290334700"/><text x="92.1032%" y="479.50"></text></g><g><title>core::cmp::min_by (290,334,700 samples, 0.04%)</title><rect x="91.8532%" y="453" width="0.0356%" height="15" fill="rgb(208,96,46)" fg:x="748459621735" fg:w="290334700"/><text x="92.1032%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (56,471,139,995 samples, 6.93%)</title><rect x="85.6349%" y="597" width="6.9303%" height="15" fill="rgb(239,3,39)" fg:x="697789797469" fg:w="56471139995"/><text x="85.8849%" y="607.50">&lt;alloc::s..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (56,471,139,995 samples, 6.93%)</title><rect x="85.6349%" y="581" width="6.9303%" height="15" fill="rgb(233,210,1)" fg:x="697789797469" fg:w="56471139995"/><text x="85.8849%" y="591.50">core::has..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (56,471,139,995 samples, 6.93%)</title><rect x="85.6349%" y="565" width="6.9303%" height="15" fill="rgb(244,137,37)" fg:x="697789797469" fg:w="56471139995"/><text x="85.8849%" y="575.50">&lt;std::has..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (56,471,139,995 samples, 6.93%)</title><rect x="85.6349%" y="549" width="6.9303%" height="15" fill="rgb(240,136,2)" fg:x="697789797469" fg:w="56471139995"/><text x="85.8849%" y="559.50">&lt;core::ha..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (56,471,139,995 samples, 6.93%)</title><rect x="85.6349%" y="533" width="6.9303%" height="15" fill="rgb(239,18,37)" fg:x="697789797469" fg:w="56471139995"/><text x="85.8849%" y="543.50">&lt;core::ha..</text></g><g><title>core::hash::Hasher::write_u8 (15,559,642,912 samples, 1.91%)</title><rect x="90.6556%" y="517" width="1.9095%" height="15" fill="rgb(218,185,22)" fg:x="738701294552" fg:w="15559642912"/><text x="90.9056%" y="527.50">c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13,871,047,309 samples, 1.70%)</title><rect x="90.8629%" y="501" width="1.7023%" height="15" fill="rgb(225,218,4)" fg:x="740389890155" fg:w="13871047309"/><text x="91.1129%" y="511.50"></text></g><g><title>core::hash::sip::u8to64_le (5,510,981,029 samples, 0.68%)</title><rect x="91.8888%" y="485" width="0.6763%" height="15" fill="rgb(230,182,32)" fg:x="748749956435" fg:w="5510981029"/><text x="92.1388%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (97,104,046,266 samples, 11.92%)</title><rect x="80.6493%" y="645" width="11.9169%" height="15" fill="rgb(242,56,43)" fg:x="657164861892" fg:w="97104046266"/><text x="80.8993%" y="655.50">hashbrown::map::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (97,092,080,225 samples, 11.92%)</title><rect x="80.6507%" y="629" width="11.9154%" height="15" fill="rgb(233,99,24)" fg:x="657176827933" fg:w="97092080225"/><text x="80.9007%" y="639.50">core::hash::BuildH..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (57,799,752,790 samples, 7.09%)</title><rect x="85.4728%" y="613" width="7.0934%" height="15" fill="rgb(234,209,42)" fg:x="696469155368" fg:w="57799752790"/><text x="85.7228%" y="623.50">core::hash..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5,400,174,995 samples, 0.66%)</title><rect x="92.8782%" y="613" width="0.6627%" height="15" fill="rgb(227,7,12)" fg:x="756811427753" fg:w="5400174995"/><text x="93.1282%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5,400,174,995 samples, 0.66%)</title><rect x="92.8782%" y="597" width="0.6627%" height="15" fill="rgb(245,203,43)" fg:x="756811427753" fg:w="5400174995"/><text x="93.1282%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,542,938,399 samples, 0.19%)</title><rect x="93.7274%" y="597" width="0.1894%" height="15" fill="rgb(238,205,33)" fg:x="763731358405" fg:w="1542938399"/><text x="93.9774%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,542,938,399 samples, 0.19%)</title><rect x="93.7274%" y="581" width="0.1894%" height="15" fill="rgb(231,56,7)" fg:x="763731358405" fg:w="1542938399"/><text x="93.9774%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,542,938,399 samples, 0.19%)</title><rect x="93.7274%" y="565" width="0.1894%" height="15" fill="rgb(244,186,29)" fg:x="763731358405" fg:w="1542938399"/><text x="93.9774%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (593,322,413 samples, 0.07%)</title><rect x="93.8440%" y="549" width="0.0728%" height="15" fill="rgb(234,111,31)" fg:x="764680974391" fg:w="593322413"/><text x="94.0940%" y="559.50"></text></g><g><title>[libc.so.6] (18,809,534,882 samples, 2.31%)</title><rect x="95.4738%" y="517" width="2.3084%" height="15" fill="rgb(241,149,10)" fg:x="777961745969" fg:w="18809534882"/><text x="95.7238%" y="527.50">[..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (34,599,641,440 samples, 4.25%)</title><rect x="93.5414%" y="613" width="4.2462%" height="15" fill="rgb(249,206,44)" fg:x="762215579305" fg:w="34599641440"/><text x="93.7914%" y="623.50">hashb..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (31,540,923,941 samples, 3.87%)</title><rect x="93.9168%" y="597" width="3.8708%" height="15" fill="rgb(251,153,30)" fg:x="765274296804" fg:w="31540923941"/><text x="94.1668%" y="607.50">hash..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (31,540,923,941 samples, 3.87%)</title><rect x="93.9168%" y="581" width="3.8708%" height="15" fill="rgb(239,152,38)" fg:x="765274296804" fg:w="31540923941"/><text x="94.1668%" y="591.50">&lt;all..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (31,540,923,941 samples, 3.87%)</title><rect x="93.9168%" y="565" width="3.8708%" height="15" fill="rgb(249,139,47)" fg:x="765274296804" fg:w="31540923941"/><text x="94.1668%" y="575.50">allo..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (31,540,923,941 samples, 3.87%)</title><rect x="93.9168%" y="549" width="3.8708%" height="15" fill="rgb(244,64,35)" fg:x="765274296804" fg:w="31540923941"/><text x="94.1668%" y="559.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (31,540,923,941 samples, 3.87%)</title><rect x="93.9168%" y="533" width="3.8708%" height="15" fill="rgb(216,46,15)" fg:x="765274296804" fg:w="31540923941"/><text x="94.1668%" y="543.50">&lt;[A]..</text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1,001,402,749 samples, 0.12%)</title><rect x="97.7876%" y="613" width="0.1229%" height="15" fill="rgb(250,74,19)" fg:x="796815220745" fg:w="1001402749"/><text x="98.0376%" y="623.50"></text></g><g><title>hashbrown::raw::h2 (6,372,725,685 samples, 0.78%)</title><rect x="97.9192%" y="613" width="0.7821%" height="15" fill="rgb(249,42,33)" fg:x="797887478625" fg:w="6372725685"/><text x="98.1692%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (102,336,144 samples, 0.01%)</title><rect x="98.7012%" y="613" width="0.0126%" height="15" fill="rgb(242,149,17)" fg:x="804260204310" fg:w="102336144"/><text x="98.9512%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (102,336,144 samples, 0.01%)</title><rect x="98.7012%" y="597" width="0.0126%" height="15" fill="rgb(244,29,21)" fg:x="804260204310" fg:w="102336144"/><text x="98.9512%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (102,336,144 samples, 0.01%)</title><rect x="98.7012%" y="581" width="0.0126%" height="15" fill="rgb(220,130,37)" fg:x="804260204310" fg:w="102336144"/><text x="98.9512%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8,003,862,986 samples, 0.98%)</title><rect x="98.7138%" y="613" width="0.9823%" height="15" fill="rgb(211,67,2)" fg:x="804362540454" fg:w="8003862986"/><text x="98.9638%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8,003,862,986 samples, 0.98%)</title><rect x="98.7138%" y="597" width="0.9823%" height="15" fill="rgb(235,68,52)" fg:x="804362540454" fg:w="8003862986"/><text x="98.9638%" y="607.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (161,807,535,663 samples, 19.86%)</title><rect x="79.9932%" y="661" width="19.8575%" height="15" fill="rgb(246,142,3)" fg:x="651819045540" fg:w="161807535663"/><text x="80.2432%" y="671.50">hashbrown::rustc_entry::&lt;impl h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (59,357,673,045 samples, 7.28%)</title><rect x="92.5662%" y="645" width="7.2846%" height="15" fill="rgb(241,25,7)" fg:x="754268908158" fg:w="59357673045"/><text x="92.8162%" y="655.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (59,357,673,045 samples, 7.28%)</title><rect x="92.5662%" y="629" width="7.2846%" height="15" fill="rgb(242,119,39)" fg:x="754268908158" fg:w="59357673045"/><text x="92.8162%" y="639.50">hashbrown:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1,260,177,763 samples, 0.15%)</title><rect x="99.6961%" y="613" width="0.1547%" height="15" fill="rgb(241,98,45)" fg:x="812366403440" fg:w="1260177763"/><text x="99.9461%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,260,177,763 samples, 0.15%)</title><rect x="99.6961%" y="597" width="0.1547%" height="15" fill="rgb(254,28,30)" fg:x="812366403440" fg:w="1260177763"/><text x="99.9461%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,260,177,763 samples, 0.15%)</title><rect x="99.6961%" y="581" width="0.1547%" height="15" fill="rgb(241,142,54)" fg:x="812366403440" fg:w="1260177763"/><text x="99.9461%" y="591.50"></text></g><g><title>_start (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="949" width="99.9755%" height="15" fill="rgb(222,85,15)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="959.50">_start</text></g><g><title>__libc_start_main (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="933" width="99.9755%" height="15" fill="rgb(210,85,47)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="943.50">__libc_start_main</text></g><g><title>[libc.so.6] (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="917" width="99.9755%" height="15" fill="rgb(224,206,25)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="927.50">[libc.so.6]</text></g><g><title>main (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="901" width="99.9755%" height="15" fill="rgb(243,201,19)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="885" width="99.9755%" height="15" fill="rgb(236,59,4)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="869" width="99.9755%" height="15" fill="rgb(254,179,45)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="853" width="99.9755%" height="15" fill="rgb(226,14,10)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="837" width="99.9755%" height="15" fill="rgb(244,27,41)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="821" width="99.9755%" height="15" fill="rgb(235,35,32)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="805" width="99.9755%" height="15" fill="rgb(218,68,31)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="789" width="99.9755%" height="15" fill="rgb(207,120,37)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="773" width="99.9755%" height="15" fill="rgb(227,98,0)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="757" width="99.9755%" height="15" fill="rgb(207,7,3)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="741" width="99.9755%" height="15" fill="rgb(206,98,19)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="725" width="99.9755%" height="15" fill="rgb(217,5,26)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="709" width="99.9755%" height="15" fill="rgb(235,190,38)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>brc::main (814,643,843,079 samples, 99.98%)</title><rect x="0.0199%" y="693" width="99.9755%" height="15" fill="rgb(247,86,24)" fg:x="161896727" fg:w="814643843079"/><text x="0.2699%" y="703.50">brc::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (163,038,501,030 samples, 20.01%)</title><rect x="79.9868%" y="677" width="20.0086%" height="15" fill="rgb(205,101,16)" fg:x="651767238776" fg:w="163038501030"/><text x="80.2368%" y="687.50">std::collections::hash::map::Ha..</text></g><g><title>std::collections::hash::map::map_entry (1,179,158,603 samples, 0.14%)</title><rect x="99.8507%" y="661" width="0.1447%" height="15" fill="rgb(246,168,33)" fg:x="813626581203" fg:w="1179158603"/><text x="100.1007%" y="671.50"></text></g><g><title>brc (814,842,972,045 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(231,114,1)" fg:x="0" fg:w="814842972045"/><text x="0.2500%" y="975.50">brc</text></g><g><title>all (814,843,105,522 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(207,184,53)" fg:x="0" fg:w="814843105522"/><text x="0.2500%" y="991.50"></text></g></svg></svg>